# -*- coding: utf-8 -*-
"""logistica-truck-ia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MR4W0XFJ1CS-1RLSzl4zIJtAogyEOfnT

# Sistema de Agentes de IA para Planejamento de Rotas de Caminhoneiros

Este notebook implementa um sistema com dois agentes de IA para ajudar caminhoneiros a planejar rotas de entrega de forma estrat√©gica.

**Agentes:**
1.  **AgenteColetorDeDados:** Coleta a cidade atual do caminhoneiro e a lista de cidades de destino.
2.  **AgenteGeradorDeRotas:** Recebe os dados coletados e usa a busca para encontrar a melhor maneira de montar um link do Google Maps com a rota otimizada, incluindo todos os destinos como pontos de parada.
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai google-adk

# Configura√ß√µes Iniciais e Imports Essenciais
import os
from google.colab import userdata
import google.generativeai as genai

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)

import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import warnings

warnings.filterwarnings("ignore")

# Configurando a API Key do Google
try:
    os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')
    genai.configure(api_key=os.environ["GOOGLE_API_KEY"])
    print("API Key configurada com sucesso!")
except Exception as e:
    print(f"Erro ao configurar a API Key: {e}. Certifique-se de que 'GOOGLE_API_KEY' est√° definida nos secrets do Colab.")

MODEL_ID = "gemini-2.0-flash"

# Fun√ß√£o auxiliar para chamar um agente e obter a resposta final
def call_agent(agent: Agent, message_text: str, session_id: str = "default_session") -> str:
    """Envia uma mensagem para um agente e retorna a resposta textual final."""
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o ou usa uma existente com base no session_id
    session = session_service.get_session(app_name=agent.name, user_id="truck_driver_user", session_id=session_id)
    if not session:
        session = session_service.create_session(app_name=agent.name, user_id="truck_driver_user", session_id=session_id)
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="truck_driver_user", session_id=session_id, new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response.strip()

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

"""### Agente 1: AgenteColetorDeDados

Este agente √© respons√°vel por interagir com o caminhoneiro para obter as informa√ß√µes necess√°rias para o planejamento da rota: a cidade de origem e a(s) cidade(s) de destino.
"""

def criar_agente_coletor_dados():
    """Cria e retorna o Agente Coletor de Dados."""
    agente_coletor = Agent(
        name="AgenteColetorDeDados",
        model=MODEL_ID,
        description="Agente especializado em coletar informa√ß√µes de origem e destino de caminhoneiros para planejamento de rotas.",
        instruction=(
            "Voc√™ √© um assistente amig√°vel e eficiente para caminhoneiros. Sua tarefa √© coletar duas informa√ß√µes cruciais: "
            "1. A cidade ONDE o caminhoneiro EST√Å AGORA (cidade de origem)."
            "2. UMA OU MAIS cidades para ONDE o caminhoneiro PRECISA IR para fazer entregas (cidades de destino)."
            "Fa√ßa perguntas claras e diretas. Se o caminhoneiro fornecer m√∫ltiplas cidades de destino, pe√ßa para separ√°-las por v√≠rgula ou list√°-las claramente."
            "Ao final, confirme as informa√ß√µes coletadas de forma organizada, por exemplo: 'Origem: [Cidade Origem], Destinos: [Cidade Destino 1, Cidade Destino 2, ...]'."
            "N√£o utilize nenhuma ferramenta, apenas interaja com o usu√°rio para obter as informa√ß√µes."
        ),
        tools=[]
    )
    return agente_coletor

"""### Agente 2: AgenteGeradorDeRotas

Este agente recebe a cidade de origem e as cidades de destino. Ele utiliza a ferramenta `Google Search` para descobrir como formatar um URL do Google Maps que tra√ßa uma rota otimizada, passando por todos os destinos. O objetivo √© fornecer um link clic√°vel para o caminhoneiro.
"""

def criar_agente_gerador_rotas():
    """Cria e retorna o Agente Gerador de Rotas."""
    agente_gerador = Agent(
        name="AgenteGeradorDeRotas",
        model=MODEL_ID,
        description="Agente especializado em gerar links de rotas do Google Maps a partir de uma cidade de origem e cidades de destino.",
        tools=[google_search],
        instruction=(
            "Voc√™ √© um especialista em log√≠stica e no uso do Google Maps para planejamento de rotas para caminhoneiros. "
            "Sua tarefa √©, a partir de uma cidade de ORIGEM e uma ou mais cidades de DESTINO fornecidas, gerar um link clic√°vel do Google Maps "
            "que mostre a rota otimizada da origem para o primeiro destino, e depois passando por todos os outros destinos como pontos de parada (waypoints), na ordem fornecida."
            "\nPara isso, voc√™ DEVE:"
            "1. Analisar a cidade de origem e as cidades de destino fornecidas."
            "2. Usar a ferramenta `Google Search` para pesquisar o formato correto de URL do Google Maps para criar rotas com m√∫ltiplos destinos (waypoints). "
            "   Exemplos de termos de busca √∫teis: 'google maps url multiple destinations', 'google maps directions url with waypoints format', 'como criar link google maps com varios destinos'."
            "3. Com base nos resultados da pesquisa, construir o URL do Google Maps. O formato geralmente √© algo como: "
            "   `https://www.google.com/maps/dir/ORIGEM/DESTINO1/DESTINO2/DESTINO3...` onde ORIGEM, DESTINO1, etc., s√£o os nomes das cidades formatados para URL (ex: 'Sao+Paulo')."
            "4. Se houver apenas um destino, o formato √© `https://www.google.com/maps/dir/ORIGEM/DESTINO`."
            "5. Certifique-se de que os nomes das cidades no URL estejam codificados corretamente para uso em URLs (por exemplo, espa√ßos substitu√≠dos por '+'). Voc√™ pode instruir o usu√°rio a fazer isso ou tentar fazer uma suposi√ß√£o razo√°vel. Para esta tarefa, assuma que a formata√ß√£o simples com '+' para espa√ßos √© suficiente."
            "6. Retorne APENAS o link gerado e uma mensagem curta e amig√°vel, como por exemplo: 'Aqui est√° o link para sua rota no Google Maps: https://en.wiktionary.org/wiki/gerado'."
            "\nExemplo de entrada do usu√°rio para voc√™:"
            "Origem: S√£o Paulo, SP. Destinos: Campinas, SP; Sorocaba, SP; Santos, SP."
            "\nExemplo de como voc√™ deve pensar para usar a busca e gerar o link (N√ÉO MOSTRE ESTE PENSAMENTO NA RESPOSTA FINAL):"
            "   - Preciso de um link do Google Maps de S√£o Paulo para Campinas, depois Sorocaba, depois Santos."
            "   - Vou usar `Google Search` com 'google maps url multiple destinations'."
            "   - A busca retorna que o formato √© `https://www.google.com/maps/dir/A/B/C/...`."
            "   - Ent√£o o link ser√° `https://www.google.com/maps/dir/Sao+Paulo+SP/Campinas+SP/Sorocaba+SP/Santos+SP`."
            "\nSua resposta final deve ser concisa, contendo a frase introdut√≥ria e o link."
        )
    )
    return agente_gerador

"""### Execu√ß√£o do Sistema de Agentes

Agora, vamos integrar os agentes e simular a intera√ß√£o com o caminhoneiro.
"""

def main():
    print("üöö Bem-vindo ao Assistente de Rotas para Caminhoneiros! üöö\n")

    # Criar os agentes
    coletor_agente = criar_agente_coletor_dados()
    gerador_rotas_agente = criar_agente_gerador_rotas()

    # --- Etapa 1: Coletar informa√ß√µes com o AgenteColetorDeDados ---
    print("--- Iniciando coleta de informa√ß√µes com o Agente Coletor de Dados ---")
    cidade_atual = input("Agente: Ol√°! Para come√ßar, em qual cidade voc√™ est√° agora? ")
    cidades_entrega = input(f"Agente: Entendido, voc√™ est√° em {cidade_atual}. Agora, para quais cidades voc√™ precisa fazer entregas? (se for mais de uma, separe por v√≠rgula): ")

    if not cidade_atual or not cidades_entrega:
        print("\n‚ö†Ô∏è Parece que algumas informa√ß√µes est√£o faltando. Por favor, tente novamente.")
        return

    # Simula a confirma√ß√£o do Agente Coletor (poderia ser uma chamada real ao agente)
    print(f"\nAgente Coletor: Confirmando... Origem: {cidade_atual}, Destinos: {cidades_entrega}. Preparando para gerar a rota...")
    display(to_markdown(f"**Agente Coletor (Simulado):** Confirmando... \nOrigem: *{cidade_atual}* \nDestinos: *{cidades_entrega}*. \nPreparando para gerar a rota..."))
    print("---------------------------------------------------------------------")

    # --- Etapa 2: Gerar a rota com o AgenteGeradorDeRotas ---
    print("\n--- Solicitando rota ao Agente Gerador de Rotas ---")

    # Preparar a entrada para o AgenteGeradorDeRotas
    entrada_para_gerador = f"Origem: {cidade_atual}. Destinos: {cidades_entrega}."

    print(f"Enviando para o Agente Gerador de Rotas: '{entrada_para_gerador}'")
    link_rota_resposta = call_agent(gerador_rotas_agente, entrada_para_gerador, session_id="rota_session_1")

    print("\n--- Resposta do Agente Gerador de Rotas ---")
    display(to_markdown(f"**Agente Gerador de Rotas:**\n{link_rota_resposta}"))
    print("---------------------------------------------------------------------")
    print("\n‚úÖ Processo conclu√≠do! Copie o link acima e cole no seu navegador para ver a rota.")

# Executar a fun√ß√£o principal
if __name__ == '__main__':
    # Apenas para garantir que a API key est√° carregada se o usu√°rio executar esta c√©lula diretamente ap√≥s as outras.
    if "GOOGLE_API_KEY" not in os.environ or not os.environ["GOOGLE_API_KEY"]:
        try:
            os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')
            genai.configure(api_key=os.environ["GOOGLE_API_KEY"])
            print("API Key verificada antes do main.")
        except Exception as e:
            print(f"Falha ao verificar API Key no main: {e}. Certifique-se de que 'GOOGLE_API_KEY' est√° definida.")

    main()

"""### Como Usar:
1.  **Configure a API Key:** Certifique-se de que sua `GOOGLE_API_KEY` est√° configurada nos Secrets do Google Colab (Canto esquerdo, √≠cone de chave).
2.  **Execute as C√©lulas:** Rode cada c√©lula na ordem, de cima para baixo.
3.  **Interaja:** Quando solicitado, forne√ßa a cidade atual e as cidades de destino.
4.  **Receba o Link:** O sistema fornecer√° um link do Google Maps com a rota calculada.
"""